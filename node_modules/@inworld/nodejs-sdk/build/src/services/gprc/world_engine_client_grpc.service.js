"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorldEngineClientGrpcService = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const world_engine_grpc_pb_1 = require("../../../../proto/world-engine_grpc_pb");
const world_engine_pb_1 = require("../../../../proto/world-engine_pb");
const util_1 = require("util");
const config_1 = require("../../common/config");
const constants_1 = require("../../common/constants");
const helpers_1 = require("../../common/helpers");
class WorldEngineClientGrpcService {
    constructor() {
        this.config = config_1.Config.getInstance();
        this.client = new world_engine_grpc_pb_1.WorldEngineClient(this.config.getEngineHost(), this.config.getEngineSsl()
            ? grpc_js_1.credentials.createSsl()
            : grpc_js_1.credentials.createInsecure(), Object.assign({}, helpers_1.grpcOptions));
    }
    loadScene(props) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { name, sessionToken, user, capabilities } = props;
            const request = new world_engine_pb_1.LoadSceneRequest();
            request.setName(name);
            request.setCapabilities(capabilities);
            if (user) {
                request.setUser(user);
            }
            request.setClient(new world_engine_pb_1.ClientRequest().setId(((_a = props.client) === null || _a === void 0 ? void 0 : _a.getId()) || constants_1.CLIENT_ID));
            const finalRequest = props.setLoadSceneProps
                ? props.setLoadSceneProps(request)
                : request;
            return (0, util_1.promisify)(this.client.loadScene.bind(this.client))(finalRequest, this.getMetadata(sessionToken));
        });
    }
    session(props) {
        const { sessionToken, onDisconnect, onError, onMessage } = props;
        const connection = this.client.session(this.getMetadata(sessionToken));
        if (onMessage) {
            connection.on('data', onMessage);
        }
        if (onDisconnect) {
            connection.on('close', onDisconnect);
        }
        if (onError) {
            connection.on('error', (err) => {
                onError(err);
                connection.end();
            });
        }
        return connection;
    }
    getMetadata(sessionToken) {
        const metadata = new grpc_js_1.Metadata();
        metadata.add('session-id', sessionToken.sessionId);
        metadata.add('authorization', `${sessionToken.type} ${sessionToken.token}`);
        return metadata;
    }
}
exports.WorldEngineClientGrpcService = WorldEngineClientGrpcService;
