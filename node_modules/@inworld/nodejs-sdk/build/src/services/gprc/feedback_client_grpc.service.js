"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackClientGrpcService = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const feedback_grpc_pb_1 = require("../../../../proto/ai/inworld/engine/v1/feedback_grpc_pb");
const feedback_pb_1 = require("../../../../proto/ai/inworld/engine/v1/feedback_pb");
const util_1 = require("util");
const config_1 = require("../../common/config");
const constants_1 = require("../../common/constants");
const helpers_1 = require("../../common/helpers");
const logger_1 = require("../../common/logger");
const feedback_entity_1 = require("../../entities/feedback.entity");
class FeedbackClientGrpcService {
    constructor() {
        this.config = config_1.Config.getInstance();
        this.address = this.config.getHost();
        this.ssl = this.config.getSSL();
        this.client = new feedback_grpc_pb_1.FeedbackClient(this.config.getHost(), this.ssl ? grpc_js_1.credentials.createSsl() : grpc_js_1.credentials.createInsecure(), Object.assign({}, helpers_1.grpcOptions));
        this.logger = logger_1.Logger.getInstance();
    }
    createInteractionFeedback(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const { scene, correlationId = 'default', interactionFeedback, interactionId, sessionToken, } = props;
            const { sessionId: session } = sessionToken;
            const workspace = constants_1.SCENE_PATTERN.exec(scene)[1];
            const metadata = this.getMetadata(sessionToken);
            const request = new feedback_pb_1.CreateInteractionFeedbackRequest()
                .setInteractionFeedback(interactionFeedback)
                .setParent(`workspaces/${workspace}/` +
                `sessions/${session}/` +
                `interactions/${interactionId}/` +
                `groups/${correlationId}`);
            const response = yield (0, util_1.promisify)(this.client.createInteractionFeedback.bind(this.client))(request, metadata);
            this.logger.debug({
                action: 'Create interaction feedback',
                data: {
                    address: this.address,
                    ssl: this.ssl,
                    metadata: metadata.toJSON(),
                    request: request.toObject(),
                    response: response.toObject(),
                },
            });
            return feedback_entity_1.Feedback.fromProto(response);
        });
    }
    deleteInteractionFeedback(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const { name, sessionToken } = props;
            const metadata = this.getMetadata(sessionToken);
            const request = new feedback_pb_1.DeleteInteractionFeedbackRequest().setName(name);
            const response = yield (0, util_1.promisify)(this.client.deleteInteractionFeedback.bind(this.client))(request, metadata);
            this.logger.debug({
                action: 'Delete interaction feedback',
                data: {
                    address: this.address,
                    ssl: this.ssl,
                    metadata: metadata.toJSON(),
                    request: request.toObject(),
                    response: response.toObject(),
                },
            });
        });
    }
    getMetadata(sessionToken) {
        const metadata = new grpc_js_1.Metadata();
        metadata.add('session-id', sessionToken.sessionId);
        metadata.add('authorization', `${sessionToken.type} ${sessionToken.token}`);
        return metadata;
    }
}
exports.FeedbackClientGrpcService = FeedbackClientGrpcService;
