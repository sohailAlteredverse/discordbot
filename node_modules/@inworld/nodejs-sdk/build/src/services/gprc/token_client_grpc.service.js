"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenClientGrpcService = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const tokens_grpc_pb_1 = require("../../../../proto/ai/inworld/studio/v1alpha/tokens_grpc_pb");
const tokens_pb_1 = require("../../../../proto/ai/inworld/studio/v1alpha/tokens_pb");
const util_1 = require("util");
const key_signature_1 = require("../../auth/key_signature");
const config_1 = require("../../common/config");
const helpers_1 = require("../../common/helpers");
class TokenClientGrpcService {
    constructor() {
        this.config = config_1.Config.getInstance();
        this.client = new tokens_grpc_pb_1.TokensClient(this.config.getStudioHost(), this.config.getStudioSsl()
            ? grpc_js_1.credentials.createSsl()
            : grpc_js_1.credentials.createInsecure(), Object.assign({}, helpers_1.grpcOptions));
    }
    generateSessionToken(apiKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = new grpc_js_1.Metadata();
            const request = new tokens_pb_1.GenerateSessionTokenRequest();
            request.setKey(apiKey.key);
            metadata.add('authorization', key_signature_1.KeySignature.getAuthorization({
                apiKey,
                host: this.config.getStudioHost(),
            }));
            return (0, util_1.promisify)(this.client.generateSessionToken.bind(this.client))(request, metadata);
        });
    }
}
exports.TokenClientGrpcService = TokenClientGrpcService;
