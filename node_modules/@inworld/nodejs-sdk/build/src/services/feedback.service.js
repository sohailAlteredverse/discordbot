"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackService = void 0;
const feedback_entity_1 = require("../entities/feedback.entity");
const feedback_client_grpc_service_1 = require("./gprc/feedback_client_grpc.service");
class FeedbackService {
    constructor(connection) {
        this.grpcService = new feedback_client_grpc_service_1.FeedbackClientGrpcService();
        this.connection = connection;
    }
    like(props) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send(Object.assign(Object.assign({}, props), { isLike: true }));
        });
    }
    dislike(props) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send(Object.assign(Object.assign({}, props), { isLike: false }));
        });
    }
    undo(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const sessionToken = yield this.connection.ensureSessionToken();
            return this.grpcService.deleteInteractionFeedback({
                name,
                sessionToken,
            });
        });
    }
    send(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const sessionToken = yield this.connection.ensureSessionToken();
            const interactionFeedback = new feedback_entity_1.Feedback({
                isLike: props.isLike,
                types: props.types,
                comment: props.comment,
            }).toProto();
            return this.grpcService.createInteractionFeedback({
                scene: this.connection.getSceneName(),
                correlationId: props.correlationId,
                interactionFeedback,
                interactionId: props.interactionId,
                sessionToken,
            });
        });
    }
}
exports.FeedbackService = FeedbackService;
