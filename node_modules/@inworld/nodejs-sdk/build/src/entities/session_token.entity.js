"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionToken = void 0;
const util = require("node:util");
const TIME_DIFF_MS = 50 * 60 * 1000; // 5 minutes
class SessionToken {
    constructor(props) {
        this.token = props.token;
        this.type = props.type;
        this.expirationTime = props.expirationTime;
        this.sessionId = props.sessionId;
    }
    getToken() {
        return this.token;
    }
    getType() {
        return this.type;
    }
    getExpirationTime() {
        return this.expirationTime;
    }
    getSessionId() {
        return this.sessionId;
    }
    static isExpired(token) {
        const expirationTime = token.expirationTime;
        return (new Date(expirationTime).getTime() - new Date().getTime() <= TIME_DIFF_MS);
    }
    static serialize(token) {
        return JSON.stringify(Object.assign(Object.assign({}, token), { expirationTime: token.expirationTime.toISOString() }));
    }
    static deserialize(json) {
        try {
            const { token, type, expirationTime, sessionId } = JSON.parse(json);
            return new SessionToken({
                token,
                type,
                sessionId,
                expirationTime: new Date(expirationTime),
            });
        }
        catch (e) { }
    }
    static fromProto(proto) {
        return new SessionToken({
            token: proto.getToken(),
            type: proto.getType(),
            expirationTime: proto.getExpirationTime().toDate(),
            sessionId: proto.getSessionId(),
        });
    }
}
exports.SessionToken = SessionToken;
SessionToken.prototype.getToken = util.deprecate(SessionToken.prototype.getToken, 'getToken() is deprecated. Use `token` property instead.');
SessionToken.prototype.getType = util.deprecate(SessionToken.prototype.getType, 'getType() is deprecated. Use `type` property instead.');
SessionToken.prototype.getSessionId = util.deprecate(SessionToken.prototype.getSessionId, 'getSessionId() is deprecated. Use `sessionId` property instead.');
SessionToken.prototype.getExpirationTime = util.deprecate(SessionToken.prototype.getExpirationTime, 'getExpirationTime() is deprecated. Use `expirationTime` property instead.');
