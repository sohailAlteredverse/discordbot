"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Feedback = exports.DislikeType = void 0;
const feedback_pb_1 = require("../../../proto/ai/inworld/engine/v1/feedback_pb");
var DislikeType;
(function (DislikeType) {
    DislikeType["IRRELEVANT"] = "IRRELEVANT";
    DislikeType["UNSAFE"] = "UNSAFE";
    DislikeType["UNTRUE"] = "UNTRUE";
    DislikeType["INCORRECT_USE_KNOWLEDGE"] = "INCORRECT_USE_KNOWLEDGE";
    DislikeType["UNEXPECTED_ACTION"] = "UNEXPECTED_ACTION";
    DislikeType["UNEXPECTED_GOAL_BEHAVIOR"] = "UNEXPECTED_GOAL_BEHAVIOR";
    DislikeType["REPETITION"] = "REPETITION";
    DislikeType["UNSPECIFIED"] = "UNSPECIFIED";
})(DislikeType || (exports.DislikeType = DislikeType = {}));
class Feedback {
    constructor(props) {
        var _a, _b;
        this.isLike = (_a = props === null || props === void 0 ? void 0 : props.isLike) !== null && _a !== void 0 ? _a : false;
        this.types = (_b = props === null || props === void 0 ? void 0 : props.types) !== null && _b !== void 0 ? _b : [];
        this.comment = props === null || props === void 0 ? void 0 : props.comment;
        this.name = props === null || props === void 0 ? void 0 : props.name;
    }
    static fromProto(proto) {
        const feedback = new Feedback({
            isLike: proto.getIsLike(),
            types: proto
                .getTypeList()
                .map((type) => Feedback.convertTypeFromProto(type)),
            comment: proto.getComment(),
            name: proto.getName(),
        });
        return feedback;
    }
    toProto() {
        const proto = new feedback_pb_1.InteractionFeedback().setIsLike(this.isLike);
        if (this.types.length) {
            proto.setTypeList(this.types.map((type) => Feedback.convertTypeToProto(type)));
        }
        if (this.comment) {
            proto.setComment(this.comment);
        }
        if (this.name) {
            proto.setName(this.name);
        }
        return proto;
    }
    static convertTypeToProto(type) {
        switch (type) {
            case DislikeType.IRRELEVANT:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_IRRELEVANT;
            case DislikeType.UNSAFE:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNSAFE;
            case DislikeType.UNTRUE:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNTRUE;
            case DislikeType.INCORRECT_USE_KNOWLEDGE:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_INCORRECT_USE_KNOWLEDGE;
            case DislikeType.UNEXPECTED_ACTION:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNEXPECTED_ACTION;
            case DislikeType.UNEXPECTED_GOAL_BEHAVIOR:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNEXPECTED_GOAL_BEHAVIOR;
            case DislikeType.REPETITION:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_REPETITION;
            default:
                return feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNSPECIFIED;
        }
    }
    static convertTypeFromProto(type) {
        switch (type) {
            case feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_IRRELEVANT:
                return DislikeType.IRRELEVANT;
            case feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNSAFE:
                return DislikeType.UNSAFE;
            case feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNTRUE:
                return DislikeType.UNTRUE;
            case feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_INCORRECT_USE_KNOWLEDGE:
                return DislikeType.INCORRECT_USE_KNOWLEDGE;
            case feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNEXPECTED_ACTION:
                return DislikeType.UNEXPECTED_ACTION;
            case feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_UNEXPECTED_GOAL_BEHAVIOR:
                return DislikeType.UNEXPECTED_GOAL_BEHAVIOR;
            case feedback_pb_1.InteractionDislikeType.INTERACTION_DISLIKE_TYPE_REPETITION:
                return DislikeType.REPETITION;
            default:
                return DislikeType.UNSPECIFIED;
        }
    }
}
exports.Feedback = Feedback;
