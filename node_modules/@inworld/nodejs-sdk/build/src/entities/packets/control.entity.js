"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlEvent = void 0;
const packets_pb_1 = require("../../../../proto/ai/inworld/packets/packets_pb");
const data_structures_1 = require("../../common/data_structures");
const routing_entity_1 = require("./routing.entity");
class ControlEvent {
    constructor({ action, description, conversation, }) {
        this.action = action;
        if (description) {
            this.description = description;
        }
        if (conversation) {
            this.conversation = conversation;
        }
    }
    static fromProto(proto) {
        var _a, _b;
        const conversation = (_a = proto.getConversationUpdate()) !== null && _a !== void 0 ? _a : proto.getConversationEvent();
        return new ControlEvent(Object.assign({ action: this.getControlType(proto), description: proto.getDescription() }, (conversation && {
            conversation: Object.assign(Object.assign({}, (proto.getConversationEvent() && {
                type: this.getConversationType(proto),
            })), { participants: (_b = conversation
                    .getParticipantsList()
                    .map((participant) => routing_entity_1.Actor.fromProto(participant))) !== null && _b !== void 0 ? _b : [] }),
        })));
    }
    static getControlType(proto) {
        switch (proto.getAction()) {
            case packets_pb_1.ControlEvent.Action.INTERACTION_END:
                return data_structures_1.InworlControlAction.INTERACTION_END;
            case packets_pb_1.ControlEvent.Action.TTS_PLAYBACK_MUTE:
                return data_structures_1.InworlControlAction.TTS_PLAYBACK_MUTE;
            case packets_pb_1.ControlEvent.Action.TTS_PLAYBACK_UNMUTE:
                return data_structures_1.InworlControlAction.TTS_PLAYBACK_UNMUTE;
            case packets_pb_1.ControlEvent.Action.WARNING:
                return data_structures_1.InworlControlAction.WARNING;
            case packets_pb_1.ControlEvent.Action.CONVERSATION_UPDATE:
                return data_structures_1.InworlControlAction.CONVERSATION_UPDATE;
            case packets_pb_1.ControlEvent.Action.CONVERSATION_EVENT:
                return data_structures_1.InworlControlAction.CONVERSATION_EVENT;
            default:
                return data_structures_1.InworlControlAction.UNKNOWN;
        }
    }
    static getConversationType(proto) {
        switch (proto.getConversationEvent().getEventType()) {
            case packets_pb_1.ConversationEventPayload.ConversationEventType.STARTED:
                return data_structures_1.InworldConversationEventType.STARTED;
            case packets_pb_1.ConversationEventPayload.ConversationEventType.UPDATED:
                return data_structures_1.InworldConversationEventType.UPDATED;
            case packets_pb_1.ConversationEventPayload.ConversationEventType.EVICTED:
                return data_structures_1.InworldConversationEventType.EVICTED;
            default:
                return data_structures_1.InworldConversationEventType.UNKNOWN;
        }
    }
}
exports.ControlEvent = ControlEvent;
