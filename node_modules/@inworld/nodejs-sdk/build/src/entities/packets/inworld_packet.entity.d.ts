import { InworldPacket as ProtoPacket } from '../../../../proto/ai/inworld/packets/packets_pb';
import { InworldPacketType } from '../../common/data_structures';
import { Character } from '../character.entity';
import { AudioEvent } from './audio.entity';
import { CancelResponsesEvent } from './cancel_responses.entity';
import { ControlEvent } from './control.entity';
import { EmotionEvent } from './emotion/emotion.entity';
import { NarratedAction } from './narrated_action.entity';
import { PacketId } from './packet_id.entity';
import { Routing } from './routing.entity';
import { SilenceEvent } from './silence.entity';
import { TextEvent } from './text.entity';
import { TriggerEvent } from './trigger.entity';
export interface InworldPacketProps {
    audio?: AudioEvent;
    cancelResponses?: CancelResponsesEvent;
    control?: ControlEvent;
    trigger?: TriggerEvent;
    emotions?: EmotionEvent;
    silence?: SilenceEvent;
    packetId: PacketId;
    routing: Routing;
    text?: TextEvent;
    narratedAction?: NarratedAction;
    sceneMutation?: SceneMutation;
    date: string;
    type: InworldPacketType;
}
export interface SceneMutation {
    name?: string;
    description?: string;
    displayName?: string;
    addedCharacterNames?: string[];
    removedCharacterIds?: string[];
    loadedCharacters?: Character[];
}
export declare class InworldPacket {
    private type;
    readonly date: string;
    readonly packetId: PacketId;
    readonly routing: Routing;
    readonly text: TextEvent;
    readonly audio: AudioEvent;
    readonly control: ControlEvent;
    readonly trigger: TriggerEvent;
    readonly emotions: EmotionEvent;
    readonly silence: SilenceEvent;
    readonly narratedAction: NarratedAction;
    readonly cancelResponses: CancelResponsesEvent;
    readonly sceneMutation: SceneMutation;
    constructor(props: InworldPacketProps);
    isText(): boolean;
    isAudio(): boolean;
    isControl(): boolean;
    isTrigger(): boolean;
    isEmotion(): boolean;
    isInteractionEnd(): boolean;
    isTTSPlaybackMute(): boolean;
    isTTSPlaybackUnmute(): boolean;
    isWarning(): boolean;
    isSilence(): boolean;
    isCancelResponse(): boolean;
    isNarratedAction(): boolean;
    isSceneMutationRequest(): boolean;
    isSceneMutationResponse(): boolean;
    shouldHaveConversationId(): boolean;
    static fromProto(proto: ProtoPacket): InworldPacket;
    private static getType;
}
