"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LoggerLevel = void 0;
const winston_1 = require("winston");
const { File: TransportsFile } = winston_1.transports;
var LoggerLevel;
(function (LoggerLevel) {
    LoggerLevel["DEBUG"] = "debug";
    LoggerLevel["WARN"] = "warn";
    LoggerLevel["ERROR"] = "error";
})(LoggerLevel || (exports.LoggerLevel = LoggerLevel = {}));
class Logger {
    constructor() {
        this.file = process.env.NODE_SDK_INWORLD_LOGGER_FILE;
        this.level = Logger.getLevel();
        if (this.level) {
            const transports = [
                this.createTransport(this.level, this.file),
            ];
            this.logger = (0, winston_1.createLogger)({
                format: winston_1.format.combine(winston_1.format.timestamp(), winston_1.format.errors({ stack: true }), winston_1.format.splat(), winston_1.format.json(), winston_1.format.prettyPrint()),
                transports,
                exceptionHandlers: this.createTransport(this.level, this.file),
            });
        }
    }
    static getLevel() {
        var _a, _b, _c;
        const parsed = (_c = (_b = (_a = process.env.NODE_SDK_INWORLD_LOGGER_LEVEL) === null || _a === void 0 ? void 0 : _a.trim()) === null || _b === void 0 ? void 0 : _b.toLocaleLowerCase()) !== null && _c !== void 0 ? _c : '';
        return parsed;
    }
    static getInstance() {
        Logger.instance = Logger.instance || new Logger();
        return Logger.instance;
    }
    debug(message) {
        var _a;
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug(message);
    }
    warn(message) {
        var _a;
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.warn(message);
    }
    error(err) {
        var _a;
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(err);
    }
    createTransport(level, file) {
        return file
            ? new TransportsFile({
                filename: file,
                level,
            })
            : new winston_1.transports.Console({ level });
    }
}
exports.Logger = Logger;
